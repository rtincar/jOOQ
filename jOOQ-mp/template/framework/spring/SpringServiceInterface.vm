#exposeVariableEntitySpecific()
##putImportParams()
#getTemplatePropertyValue("uml")
#if (!$value.equals("true"))
#putImportParams()
#else
#putImportParamsUML()
#end
package $packageName;

#getTemplatePropertyValue("uml")
#if (!$value.equals("true"))
import $importDomainObject;
#else
import $importDomainObjectUML;
#end
import java.util.List;
import java.sql.*;

#if($addRest)
#exposeRESTURLServer()
import javax.ws.rs.Path;
import javax.ws.rs.PathParam;
import javax.ws.rs.FormParam;
import javax.ws.rs.Consumes;
import javax.ws.rs.POST;
import javax.ws.rs.DELETE;
import javax.ws.rs.GET;
import javax.ws.rs.PUT;
import javax.ws.rs.Produces;
import javax.ws.rs.core.Context;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.Request;
import javax.ws.rs.core.Response;
import javax.ws.rs.core.UriInfo;
import javax.xml.bind.JAXBElement;
#end

/**
 *
 * <p>Title: $className</p>
 *
 * <p>Description: Service layer Interface 
 * It offers coarse grain methods over the fine grain DAO layer:
 * It performs input and business validation.
 * </p>
 *
 */
#if($addRest)
@Path ("$restXmlServerUrl")
@Produces ({MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON})
@Consumes ({MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON})
#end
public class $className implements $SpringServiceInterfaceClass{

    /**
     * Inserts a $tableClassName entity $tCN 
     * @param $tableClassName $tableVariableName
     */
    public void insert ($tableClassName $tableVariableName) ;

    /**
     * Updates a $tableClassName entity 
     * @param $tableClassName $tableVariableName
     */
    public $tableClassName update($tableClassName $tableVariableName) ;

     /**
     * Saves a $tableClassName entity 
     * @param $tableClassName $tableVariableName
     */
    public void save($tableClassName $tableVariableName);
    
    /**
     * Deletes a $tableClassName entity 
     * @param $tableClassName $tableVariableName
     */
    public void delete($tableClassName $tableVariableName) ; 
        
    /**
     * Loads the $tableClassName entity which is related to an instance of
     * $tableClassName
     * @param $primaryKeyFullType $primaryKey
     * @return $tableClassName The $tableClassName entity
     */
    public $tableClassName loadFullFirstLevel$tableClassName($tableClassName $tableVariableName);    

    /**
     * Searches a list of $tableClassName entity 
     * @param $tableClassName $tableVariableName
     * @return List
     */
    public List<$tableClassName> search$tableClassName($tableClassName $tableVariableName) ;
               
}
