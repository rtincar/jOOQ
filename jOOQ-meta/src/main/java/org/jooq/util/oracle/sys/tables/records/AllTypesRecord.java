/**
 * This class is generated by jOOQ
 */
package org.jooq.util.oracle.sys.tables.records;

/**
 * This class is generated by jOOQ.
 *
 * Description of types accessible to the user
 */
@javax.annotation.Generated(value    = {"http://www.jooq.org", "2.0.2"},
                            comments = "This class is generated by jOOQ")
public class AllTypesRecord extends org.jooq.impl.TableRecordImpl<org.jooq.util.oracle.sys.tables.records.AllTypesRecord> {

	private static final long serialVersionUID = 661442714;

	/**
	 * Owner of the type
	 */
	public void setOwner(java.lang.String value) {
		setValue(org.jooq.util.oracle.sys.tables.AllTypes.ALL_TYPES.OWNER, value);
	}

	/**
	 * Owner of the type
	 */
	public java.lang.String getOwner() {
		return getValue(org.jooq.util.oracle.sys.tables.AllTypes.ALL_TYPES.OWNER);
	}

	/**
	 * Name of the type
	 */
	public void setTypeName(java.lang.String value) {
		setValue(org.jooq.util.oracle.sys.tables.AllTypes.ALL_TYPES.TYPE_NAME, value);
	}

	/**
	 * Name of the type
	 */
	public java.lang.String getTypeName() {
		return getValue(org.jooq.util.oracle.sys.tables.AllTypes.ALL_TYPES.TYPE_NAME);
	}

	/**
	 * Object identifier (OID) of the type
	 */
	public void setTypeOid(byte[] value) {
		setValue(org.jooq.util.oracle.sys.tables.AllTypes.ALL_TYPES.TYPE_OID, value);
	}

	/**
	 * Object identifier (OID) of the type
	 */
	public byte[] getTypeOid() {
		return getValue(org.jooq.util.oracle.sys.tables.AllTypes.ALL_TYPES.TYPE_OID);
	}

	/**
	 * Typecode of the type
	 */
	public void setTypecode(java.lang.String value) {
		setValue(org.jooq.util.oracle.sys.tables.AllTypes.ALL_TYPES.TYPECODE, value);
	}

	/**
	 * Typecode of the type
	 */
	public java.lang.String getTypecode() {
		return getValue(org.jooq.util.oracle.sys.tables.AllTypes.ALL_TYPES.TYPECODE);
	}

	/**
	 * Number of attributes in the type
	 */
	public void setAttributes(java.math.BigDecimal value) {
		setValue(org.jooq.util.oracle.sys.tables.AllTypes.ALL_TYPES.ATTRIBUTES, value);
	}

	/**
	 * Number of attributes in the type
	 */
	public java.math.BigDecimal getAttributes() {
		return getValue(org.jooq.util.oracle.sys.tables.AllTypes.ALL_TYPES.ATTRIBUTES);
	}

	/**
	 * Number of methods in the type
	 */
	public void setMethods(java.math.BigDecimal value) {
		setValue(org.jooq.util.oracle.sys.tables.AllTypes.ALL_TYPES.METHODS, value);
	}

	/**
	 * Number of methods in the type
	 */
	public java.math.BigDecimal getMethods() {
		return getValue(org.jooq.util.oracle.sys.tables.AllTypes.ALL_TYPES.METHODS);
	}

	/**
	 * Is the type a predefined type?
	 */
	public void setPredefined(java.lang.String value) {
		setValue(org.jooq.util.oracle.sys.tables.AllTypes.ALL_TYPES.PREDEFINED, value);
	}

	/**
	 * Is the type a predefined type?
	 */
	public java.lang.String getPredefined() {
		return getValue(org.jooq.util.oracle.sys.tables.AllTypes.ALL_TYPES.PREDEFINED);
	}

	/**
	 * Is the type an incomplete type?
	 */
	public void setIncomplete(java.lang.String value) {
		setValue(org.jooq.util.oracle.sys.tables.AllTypes.ALL_TYPES.INCOMPLETE, value);
	}

	/**
	 * Is the type an incomplete type?
	 */
	public java.lang.String getIncomplete() {
		return getValue(org.jooq.util.oracle.sys.tables.AllTypes.ALL_TYPES.INCOMPLETE);
	}

	/**
	 * Is the type a final type?
	 */
	public void setFinal(java.lang.String value) {
		setValue(org.jooq.util.oracle.sys.tables.AllTypes.ALL_TYPES.FINAL, value);
	}

	/**
	 * Is the type a final type?
	 */
	public java.lang.String getFinal() {
		return getValue(org.jooq.util.oracle.sys.tables.AllTypes.ALL_TYPES.FINAL);
	}

	/**
	 * Is the type an instantiable type?
	 */
	public void setInstantiable(java.lang.String value) {
		setValue(org.jooq.util.oracle.sys.tables.AllTypes.ALL_TYPES.INSTANTIABLE, value);
	}

	/**
	 * Is the type an instantiable type?
	 */
	public java.lang.String getInstantiable() {
		return getValue(org.jooq.util.oracle.sys.tables.AllTypes.ALL_TYPES.INSTANTIABLE);
	}

	/**
	 * Owner of the supertype (null if type is not a subtype)
	 */
	public void setSupertypeOwner(java.lang.String value) {
		setValue(org.jooq.util.oracle.sys.tables.AllTypes.ALL_TYPES.SUPERTYPE_OWNER, value);
	}

	/**
	 * Owner of the supertype (null if type is not a subtype)
	 */
	public java.lang.String getSupertypeOwner() {
		return getValue(org.jooq.util.oracle.sys.tables.AllTypes.ALL_TYPES.SUPERTYPE_OWNER);
	}

	/**
	 * Name of the supertype (null if type is not a subtype)
	 */
	public void setSupertypeName(java.lang.String value) {
		setValue(org.jooq.util.oracle.sys.tables.AllTypes.ALL_TYPES.SUPERTYPE_NAME, value);
	}

	/**
	 * Name of the supertype (null if type is not a subtype)
	 */
	public java.lang.String getSupertypeName() {
		return getValue(org.jooq.util.oracle.sys.tables.AllTypes.ALL_TYPES.SUPERTYPE_NAME);
	}

	/**
	 * Number of local (not inherited) attributes (if any) in the subtype
	 */
	public void setLocalAttributes(java.math.BigDecimal value) {
		setValue(org.jooq.util.oracle.sys.tables.AllTypes.ALL_TYPES.LOCAL_ATTRIBUTES, value);
	}

	/**
	 * Number of local (not inherited) attributes (if any) in the subtype
	 */
	public java.math.BigDecimal getLocalAttributes() {
		return getValue(org.jooq.util.oracle.sys.tables.AllTypes.ALL_TYPES.LOCAL_ATTRIBUTES);
	}

	/**
	 * Number of local (not inherited) methods (if any) in the subtype
	 */
	public void setLocalMethods(java.math.BigDecimal value) {
		setValue(org.jooq.util.oracle.sys.tables.AllTypes.ALL_TYPES.LOCAL_METHODS, value);
	}

	/**
	 * Number of local (not inherited) methods (if any) in the subtype
	 */
	public java.math.BigDecimal getLocalMethods() {
		return getValue(org.jooq.util.oracle.sys.tables.AllTypes.ALL_TYPES.LOCAL_METHODS);
	}

	/**
	 * Type id value of the type
	 */
	public void setTypeid(byte[] value) {
		setValue(org.jooq.util.oracle.sys.tables.AllTypes.ALL_TYPES.TYPEID, value);
	}

	/**
	 * Type id value of the type
	 */
	public byte[] getTypeid() {
		return getValue(org.jooq.util.oracle.sys.tables.AllTypes.ALL_TYPES.TYPEID);
	}

	/**
	 * Create a detached AllTypesRecord
	 */
	public AllTypesRecord() {
		super(org.jooq.util.oracle.sys.tables.AllTypes.ALL_TYPES);
	}
}
