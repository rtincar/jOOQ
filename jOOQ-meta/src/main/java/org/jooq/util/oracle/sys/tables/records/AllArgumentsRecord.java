/**
 * This class is generated by jOOQ
 */
package org.jooq.util.oracle.sys.tables.records;

/**
 * This class is generated by jOOQ.
 *
 * Arguments in object accessible to the user
 */
@javax.annotation.Generated(value    = {"http://www.jooq.org", "2.0.5"},
                            comments = "This class is generated by jOOQ")
public class AllArgumentsRecord extends org.jooq.impl.TableRecordImpl<org.jooq.util.oracle.sys.tables.records.AllArgumentsRecord> {

	private static final long serialVersionUID = -1393019373;

	/**
	 * Username of the owner of the object
	 */
	public void setOwner(java.lang.String value) {
		setValue(org.jooq.util.oracle.sys.tables.AllArguments.ALL_ARGUMENTS.OWNER, value);
	}

	/**
	 * Username of the owner of the object
	 */
	public java.lang.String getOwner() {
		return getValue(org.jooq.util.oracle.sys.tables.AllArguments.ALL_ARGUMENTS.OWNER);
	}

	/**
	 * Procedure or function name
	 */
	public void setObjectName(java.lang.String value) {
		setValue(org.jooq.util.oracle.sys.tables.AllArguments.ALL_ARGUMENTS.OBJECT_NAME, value);
	}

	/**
	 * Procedure or function name
	 */
	public java.lang.String getObjectName() {
		return getValue(org.jooq.util.oracle.sys.tables.AllArguments.ALL_ARGUMENTS.OBJECT_NAME);
	}

	/**
	 * Package name
	 */
	public void setPackageName(java.lang.String value) {
		setValue(org.jooq.util.oracle.sys.tables.AllArguments.ALL_ARGUMENTS.PACKAGE_NAME, value);
	}

	/**
	 * Package name
	 */
	public java.lang.String getPackageName() {
		return getValue(org.jooq.util.oracle.sys.tables.AllArguments.ALL_ARGUMENTS.PACKAGE_NAME);
	}

	/**
	 * Object number of the object
	 */
	public void setObjectId(java.math.BigDecimal value) {
		setValue(org.jooq.util.oracle.sys.tables.AllArguments.ALL_ARGUMENTS.OBJECT_ID, value);
	}

	/**
	 * Object number of the object
	 */
	public java.math.BigDecimal getObjectId() {
		return getValue(org.jooq.util.oracle.sys.tables.AllArguments.ALL_ARGUMENTS.OBJECT_ID);
	}

	/**
	 * Overload unique identifier
	 */
	public void setOverload(java.lang.String value) {
		setValue(org.jooq.util.oracle.sys.tables.AllArguments.ALL_ARGUMENTS.OVERLOAD, value);
	}

	/**
	 * Overload unique identifier
	 */
	public java.lang.String getOverload() {
		return getValue(org.jooq.util.oracle.sys.tables.AllArguments.ALL_ARGUMENTS.OVERLOAD);
	}

	/**
	 * Unique sub-program Identifier
	 */
	public void setSubprogramId(java.math.BigDecimal value) {
		setValue(org.jooq.util.oracle.sys.tables.AllArguments.ALL_ARGUMENTS.SUBPROGRAM_ID, value);
	}

	/**
	 * Unique sub-program Identifier
	 */
	public java.math.BigDecimal getSubprogramId() {
		return getValue(org.jooq.util.oracle.sys.tables.AllArguments.ALL_ARGUMENTS.SUBPROGRAM_ID);
	}

	/**
	 * Argument name
	 */
	public void setArgumentName(java.lang.String value) {
		setValue(org.jooq.util.oracle.sys.tables.AllArguments.ALL_ARGUMENTS.ARGUMENT_NAME, value);
	}

	/**
	 * Argument name
	 */
	public java.lang.String getArgumentName() {
		return getValue(org.jooq.util.oracle.sys.tables.AllArguments.ALL_ARGUMENTS.ARGUMENT_NAME);
	}

	/**
	 * Position in argument list, or null for function return value
	 */
	public void setPosition(java.math.BigDecimal value) {
		setValue(org.jooq.util.oracle.sys.tables.AllArguments.ALL_ARGUMENTS.POSITION, value);
	}

	/**
	 * Position in argument list, or null for function return value
	 */
	public java.math.BigDecimal getPosition() {
		return getValue(org.jooq.util.oracle.sys.tables.AllArguments.ALL_ARGUMENTS.POSITION);
	}

	/**
	 * Argument sequence, including all nesting levels
	 */
	public void setSequence(java.math.BigDecimal value) {
		setValue(org.jooq.util.oracle.sys.tables.AllArguments.ALL_ARGUMENTS.SEQUENCE, value);
	}

	/**
	 * Argument sequence, including all nesting levels
	 */
	public java.math.BigDecimal getSequence() {
		return getValue(org.jooq.util.oracle.sys.tables.AllArguments.ALL_ARGUMENTS.SEQUENCE);
	}

	/**
	 * Nesting depth of argument for composite types
	 */
	public void setDataLevel(java.math.BigDecimal value) {
		setValue(org.jooq.util.oracle.sys.tables.AllArguments.ALL_ARGUMENTS.DATA_LEVEL, value);
	}

	/**
	 * Nesting depth of argument for composite types
	 */
	public java.math.BigDecimal getDataLevel() {
		return getValue(org.jooq.util.oracle.sys.tables.AllArguments.ALL_ARGUMENTS.DATA_LEVEL);
	}

	/**
	 * Datatype of the argument
	 */
	public void setDataType(java.lang.String value) {
		setValue(org.jooq.util.oracle.sys.tables.AllArguments.ALL_ARGUMENTS.DATA_TYPE, value);
	}

	/**
	 * Datatype of the argument
	 */
	public java.lang.String getDataType() {
		return getValue(org.jooq.util.oracle.sys.tables.AllArguments.ALL_ARGUMENTS.DATA_TYPE);
	}

	/**
	 * Is the argument defaulted?
	 */
	public void setDefaulted(java.lang.String value) {
		setValue(org.jooq.util.oracle.sys.tables.AllArguments.ALL_ARGUMENTS.DEFAULTED, value);
	}

	/**
	 * Is the argument defaulted?
	 */
	public java.lang.String getDefaulted() {
		return getValue(org.jooq.util.oracle.sys.tables.AllArguments.ALL_ARGUMENTS.DEFAULTED);
	}

	/**
	 * Default value for the argument
	 */
	public void setDefaultValue(java.lang.String value) {
		setValue(org.jooq.util.oracle.sys.tables.AllArguments.ALL_ARGUMENTS.DEFAULT_VALUE, value);
	}

	/**
	 * Default value for the argument
	 */
	public java.lang.String getDefaultValue() {
		return getValue(org.jooq.util.oracle.sys.tables.AllArguments.ALL_ARGUMENTS.DEFAULT_VALUE);
	}

	/**
	 * Length of default value for the argument
	 */
	public void setDefaultLength(java.math.BigDecimal value) {
		setValue(org.jooq.util.oracle.sys.tables.AllArguments.ALL_ARGUMENTS.DEFAULT_LENGTH, value);
	}

	/**
	 * Length of default value for the argument
	 */
	public java.math.BigDecimal getDefaultLength() {
		return getValue(org.jooq.util.oracle.sys.tables.AllArguments.ALL_ARGUMENTS.DEFAULT_LENGTH);
	}

	/**
	 * Argument direction (IN, OUT, or IN/OUT)
	 */
	public void setInOut(java.lang.String value) {
		setValue(org.jooq.util.oracle.sys.tables.AllArguments.ALL_ARGUMENTS.IN_OUT, value);
	}

	/**
	 * Argument direction (IN, OUT, or IN/OUT)
	 */
	public java.lang.String getInOut() {
		return getValue(org.jooq.util.oracle.sys.tables.AllArguments.ALL_ARGUMENTS.IN_OUT);
	}

	/**
	 * Length of the column in bytes
	 */
	public void setDataLength(java.math.BigDecimal value) {
		setValue(org.jooq.util.oracle.sys.tables.AllArguments.ALL_ARGUMENTS.DATA_LENGTH, value);
	}

	/**
	 * Length of the column in bytes
	 */
	public java.math.BigDecimal getDataLength() {
		return getValue(org.jooq.util.oracle.sys.tables.AllArguments.ALL_ARGUMENTS.DATA_LENGTH);
	}

	/**
	 * Length: decimal digits (NUMBER) or binary digits (FLOAT)
	 */
	public void setDataPrecision(java.math.BigDecimal value) {
		setValue(org.jooq.util.oracle.sys.tables.AllArguments.ALL_ARGUMENTS.DATA_PRECISION, value);
	}

	/**
	 * Length: decimal digits (NUMBER) or binary digits (FLOAT)
	 */
	public java.math.BigDecimal getDataPrecision() {
		return getValue(org.jooq.util.oracle.sys.tables.AllArguments.ALL_ARGUMENTS.DATA_PRECISION);
	}

	/**
	 * Digits to right of decimal point in a number
	 */
	public void setDataScale(java.math.BigDecimal value) {
		setValue(org.jooq.util.oracle.sys.tables.AllArguments.ALL_ARGUMENTS.DATA_SCALE, value);
	}

	/**
	 * Digits to right of decimal point in a number
	 */
	public java.math.BigDecimal getDataScale() {
		return getValue(org.jooq.util.oracle.sys.tables.AllArguments.ALL_ARGUMENTS.DATA_SCALE);
	}

	/**
	 * Argument radix for a number
	 */
	public void setRadix(java.math.BigDecimal value) {
		setValue(org.jooq.util.oracle.sys.tables.AllArguments.ALL_ARGUMENTS.RADIX, value);
	}

	/**
	 * Argument radix for a number
	 */
	public java.math.BigDecimal getRadix() {
		return getValue(org.jooq.util.oracle.sys.tables.AllArguments.ALL_ARGUMENTS.RADIX);
	}

	/**
	 * Character set name for the argument
	 */
	public void setCharacterSetName(java.lang.String value) {
		setValue(org.jooq.util.oracle.sys.tables.AllArguments.ALL_ARGUMENTS.CHARACTER_SET_NAME, value);
	}

	/**
	 * Character set name for the argument
	 */
	public java.lang.String getCharacterSetName() {
		return getValue(org.jooq.util.oracle.sys.tables.AllArguments.ALL_ARGUMENTS.CHARACTER_SET_NAME);
	}

	/**
	 * Owner name for the argument type in case of object types
	 */
	public void setTypeOwner(java.lang.String value) {
		setValue(org.jooq.util.oracle.sys.tables.AllArguments.ALL_ARGUMENTS.TYPE_OWNER, value);
	}

	/**
	 * Owner name for the argument type in case of object types
	 */
	public java.lang.String getTypeOwner() {
		return getValue(org.jooq.util.oracle.sys.tables.AllArguments.ALL_ARGUMENTS.TYPE_OWNER);
	}

	/**
	 * Object name for the argument type in case of object types
	 */
	public void setTypeName(java.lang.String value) {
		setValue(org.jooq.util.oracle.sys.tables.AllArguments.ALL_ARGUMENTS.TYPE_NAME, value);
	}

	/**
	 * Object name for the argument type in case of object types
	 */
	public java.lang.String getTypeName() {
		return getValue(org.jooq.util.oracle.sys.tables.AllArguments.ALL_ARGUMENTS.TYPE_NAME);
	}

	/**
	 * Subordinate object name for the argument type in case of object types
	 */
	public void setTypeSubname(java.lang.String value) {
		setValue(org.jooq.util.oracle.sys.tables.AllArguments.ALL_ARGUMENTS.TYPE_SUBNAME, value);
	}

	/**
	 * Subordinate object name for the argument type in case of object types
	 */
	public java.lang.String getTypeSubname() {
		return getValue(org.jooq.util.oracle.sys.tables.AllArguments.ALL_ARGUMENTS.TYPE_SUBNAME);
	}

	/**
	 * Database link name for the argument type in case of object types
	 */
	public void setTypeLink(java.lang.String value) {
		setValue(org.jooq.util.oracle.sys.tables.AllArguments.ALL_ARGUMENTS.TYPE_LINK, value);
	}

	/**
	 * Database link name for the argument type in case of object types
	 */
	public java.lang.String getTypeLink() {
		return getValue(org.jooq.util.oracle.sys.tables.AllArguments.ALL_ARGUMENTS.TYPE_LINK);
	}

	/**
	 * PL/SQL type name for numeric arguments
	 */
	public void setPlsType(java.lang.String value) {
		setValue(org.jooq.util.oracle.sys.tables.AllArguments.ALL_ARGUMENTS.PLS_TYPE, value);
	}

	/**
	 * PL/SQL type name for numeric arguments
	 */
	public java.lang.String getPlsType() {
		return getValue(org.jooq.util.oracle.sys.tables.AllArguments.ALL_ARGUMENTS.PLS_TYPE);
	}

	/**
	 * Character limit for string datatypes
	 */
	public void setCharLength(java.math.BigDecimal value) {
		setValue(org.jooq.util.oracle.sys.tables.AllArguments.ALL_ARGUMENTS.CHAR_LENGTH, value);
	}

	/**
	 * Character limit for string datatypes
	 */
	public java.math.BigDecimal getCharLength() {
		return getValue(org.jooq.util.oracle.sys.tables.AllArguments.ALL_ARGUMENTS.CHAR_LENGTH);
	}

	/**
	 * Is the byte limit (B) or char limit (C) official for this string?
	 */
	public void setCharUsed(java.lang.String value) {
		setValue(org.jooq.util.oracle.sys.tables.AllArguments.ALL_ARGUMENTS.CHAR_USED, value);
	}

	/**
	 * Is the byte limit (B) or char limit (C) official for this string?
	 */
	public java.lang.String getCharUsed() {
		return getValue(org.jooq.util.oracle.sys.tables.AllArguments.ALL_ARGUMENTS.CHAR_USED);
	}

	/**
	 * Create a detached AllArgumentsRecord
	 */
	public AllArgumentsRecord() {
		super(org.jooq.util.oracle.sys.tables.AllArguments.ALL_ARGUMENTS);
	}
}
