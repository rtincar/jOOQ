/**
 * Copyright (c) 2009-2011, Lukas Eder, lukas.eder@gmail.com
 * All rights reserved.
 *
 * This software is licensed to you under the Apache License, Version 2.0
 * (the "License"); You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * . Redistributions of source code must retain the above copyright notice, this
 *   list of conditions and the following disclaimer.
 *
 * . Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 *
 * . Neither the name "jOOQ" nor the names of its contributors may be
 *   used to endorse or promote products derived from this software without
 *   specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */
package org.jooq;

/**
 * The render context is used for rendering {@link QueryPart}'s to SQL. A new
 * render context is instanciated every time a {@link Query} is rendered.
 * <code>QueryPart</code>'s will then pass the same context to their components
 * <p>
 * This interface is for JOOQ INTERNAL USE only. Do not reference directly
 *
 * @author Lukas Eder
 * @see BindContext
 */
public interface RenderContext extends Context<RenderContext> {

    /**
     * Peek the next alias that will be generated by {@link #nextAlias()}
     */
    String peekAlias();

    /**
     * Return a new alias that is unique for the scope of one query. These
     * aliases are sometimes needed when unaliased projections are defined in
     * subqueries, which can lead to syntax errors.
     */
    String nextAlias();

    /**
     * Render the context's underlying SQL statement
     */
    String render();

    /**
     * Render a query part in a new context derived from this one. The rendered
     * SQL will not be appended to this context.
     */
    String render(QueryPart part);

    /**
     * Append some SQL to the context's contained {@link StringBuilder}
     */
    RenderContext sql(String sql);

    /**
     * Append some SQL to the context's contained {@link StringBuilder}
     */
    RenderContext sql(char sql);

    /**
     * Append some SQL to the context's contained {@link StringBuilder}
     */
    RenderContext sql(int sql);

    /**
     * Recurse rendering
     */
    RenderContext sql(QueryPart part);

    /**
     * Append some (quoted) literal to the context's contained
     * {@link StringBuilder}
     */
    RenderContext literal(String literal);

    /**
     * Whether bind variables should be inlined, rather than rendered as
     * <code>'?'</code>
     */
    boolean inline();

    /**
     * Set the new context value for {@link #inline()}
     */
    RenderContext inline(boolean inline);

    /**
     * Whether bind variables should be rendered as named parameters:<br/>
     * <code>&#160; :1, :2, :custom_name</code>
     * <p>
     * or as JDBC bind variables <br/>
     * <code>&#160; ?</code>
     */
    boolean namedParams();

    /**
     * Set the new context value for {@link #namedParams()}
     */
    RenderContext namedParams(boolean renderNamedParams);

    /**
     * The currently applied cast mode for bind values
     */
    CastMode castMode();

    /**
     * Set the new cast mode for {@link #castMode()}
     */
    RenderContext castMode(CastMode mode);

    /**
     * Whether casting must be applied. The result follows this logic:
     * <table border="1">
     * <tr>
     * <th>CastMode</th>
     * <th>result</th>
     * </tr>
     * <tr>
     * <td><code>ALWAYS</code></td>
     * <td><code>true</code></td>
     * </tr>
     * <tr>
     * <td><code>NEVER</code></td>
     * <td><code>false</code></td>
     * </tr>
     * <tr>
     * <td><code>SOME</code></td>
     * <td><code>true</code> or <code>false</code> depending on the dialect</td>
     * </tr>
     * <tr>
     * <td><code>DEFAULT</code></td>
     * <td><code>null</code></td>
     * </tr>
     * </table>
     */
    Boolean cast();

    /**
     * Set the new cast mode to {@link CastMode#SOME} for a list of dialects
     */
    RenderContext castModeSome(SQLDialect... dialects);

    /**
     * The cast mode for bind values.
     *
     * @see RenderContext#castMode()
     */
    enum CastMode {

        /**
         * Cast all bind values to their respective type
         */
        ALWAYS,

        /**
         * Cast no bind values to their respective type
         */
        NEVER,

        /**
         * Cast bind values only in some dialects. The specified dialects assume
         * {@link #ALWAYS} behaviour, all the other dialects assume
         * {@link #NEVER}
         */
        SOME,

        /**
         * Cast when needed. This is the default mode if not specified otherwise
         */
        DEFAULT
    }
}
