package my.servlet;

import java.io.*;
import java.util.*;
import java.lang.reflect.InvocationTargetException;
import javax.sql.DataSource;

import javax.servlet.*;
import javax.servlet.http.*;
import org.apache.commons.beanutils.BeanUtilsBean;
import <your package>.factory.<your project>Factory;

#foreach ($table in ${database.tables})
#putImportParams()
import $importDomainObject;
#if ($utils.isToGenerate($table)) 
#set($tableJavaName = $utils.getJavaName($table.name))
#set($subPackage = $utils.getSubPackage($table))
import <your package>.domain.$subPackage.$tableJavaName;
#end
#end

#foreach ($table in ${database.tables})
#if ($utils.isToGenerate($table)) 
#set($tableJavaName = $utils.getJavaName($table.name))
#set($subPackage = $utils.getSubPackage($table))
import <your package>.dao.face.$subPackage.${tableJavaName}Dao;
import <your package>.dao.implementation.ibatis.$subPackage.${tableJavaName}SqlMapDaoImpl;
#end
#end
   /**
    * Handles a single guestbook request from the client.
    */
public class SearchServlet extends HttpServlet {
	
	public void doGet (HttpServletRequest req, HttpServletResponse res)
    throws ServletException, IOException {
    	doPost (req, res);
    }
    
	public void doPost (HttpServletRequest req, HttpServletResponse res)
    throws ServletException, IOException {
        //ServletOutputStream out = res.getOutputStream();
        HttpSession session = req.getSession();
        try {
#foreach ($table in ${database.tables})
#if ($utils.isToGenerate($table)) 
#set($tableJavaName = $utils.getJavaName($table.name))
#set($variable = $utils.getJavaNameVariable($table.name))
#set($subPackage = $utils.getSubPackage($table))
			if (req.getParameter("action").equals("Search$table.name")) {
				String forward = "";
				System.out.println("search $table.name");
				//out.println("search $table.name");
				$tableJavaName entity = new $tableJavaName();
				${tableJavaName}Dao dao = (${tableJavaName}Dao)${projectName}Factory.getBean("${variable}Dao");			
				populate(entity, req);
				List list = dao.search$tableJavaName(entity);
				/*List list = new ArrayList();
				//list.add(entity);
				if (list.size()==1) {
					entity = ($tableJavaName) dao.loadFullFirstLevel$tableJavaName(new Long(entity.getId().longValue()));
					System.out.println("one list");
					session.setAttribute("${tableJavaName}SearchResultOne",entity);					
					forward = "/jsp/$subPackage/${tableJavaName}SearchScreenResultOne.jsp";
				}
				*/
				if (list.size()==0) {
					System.out.println("no result");
					forward = "/jsp/$subPackage/${tableJavaName}SearchScreenResultList.jsp";
				}
		if (list.size()>0) {
					System.out.println("multiple result");
					forward = "/jsp/$subPackage/${tableJavaName}SearchScreenResultList.jsp";
				}
									session.setAttribute("${tableJavaName}SearchResultList",list);
				forward(forward,req,res);
			}
#end
#end
		} catch (IllegalAccessException iae) {
			forward("/jsp/error/SearchScreenResultError.jsp",req,res);
			//out.println("exception ex = "+iae.getMessage());
		} catch (InvocationTargetException ite) {
			forward("/jsp/error/SearchScreenResultError.jsp",req,res);
			//out.println("exception ex = "+ite.getMessage());
		}
   }
   
    private static Map getParametersMap(HttpServletRequest request) {
        Map parameters = new HashMap();
        Enumeration e = request.getParameterNames();
        while (e.hasMoreElements()) {
            String key = (String) e.nextElement();
        	String [] params = request.getParameterValues(key);
        	if (params.length>0 && !params[0].equals("")) {
            	parameters.put(key, params[0]);
            	System.out.println("search param = "+key+", "+params[0]);            		
        	}
        }
        return parameters;
    }   
    
    public static void populate(Object bean, HttpServletRequest request)
        throws IllegalAccessException, InvocationTargetException {
        Map parameters = getParametersMap(request);
        BeanUtilsBean.getInstance().populate(bean, parameters);
    }    

    private void forward(
    	    String aDestination, 
    	    HttpServletRequest aRequest, 
    	    HttpServletResponse aResponse
    	  ) throws ServletException, IOException {
    	    
    	    RequestDispatcher dispatcher = aRequest.getRequestDispatcher(aDestination);
    	    dispatcher.forward(aRequest, aResponse);
    }      
}